# add your create-obituaries function here
import boto3
import json
import cloudinary
import cloudinary.uploader
import time
import requests
import hashlib
import base64

def lambda_handler(event, context):
     # Create a client for the AWS Systems Manager Parameter Store
    ssm = boto3.client('ssm')

    # Get the API key from the parameter store
    response = ssm.get_parameter(Name='CLOUDINARY_API_KEY', WithDecryption=True)
    api_key = response['Parameter']['Value']
    response = ssm.get_parameter(Name='CLOUDINARY_SECRET_KEY', WithDecryption=True)
    api_secret = response['Parameter']['Value']
    response = ssm.get_parameter(Name='CHATGPT_SECRET_KEY', WithDecryption=True)
    chatgpt_api_key = response['Parameter']['Value']


    # Get the obituary data from the request body
    obituary = json.loads(event["body"])
    
    # Create a DynamoDB client
    dynamodb = boto3.client("dynamodb")
    
    # Get the description from Chat GPT API
    description = ChatGPT_API(chatgpt_api_key, obituary['name'], obituary['born_year'], obituary['died_year'])["body"]
    
    # Add the new obituary to the obituaries table
    response = dynamodb.put_item(
        TableName="obituaries",
        Item={
            'id': {'S': str(obituary['id'])},
            'name': {'S': obituary['name']},
            'born_year': {'S': obituary['born_year']},
            'died_year': {'S': obituary['died_year']},
            'description': {'S': description}
        }
    )
    
    # Return a success message as a JSON response
    response = {
        "statusCode": 200,
        "body": json.dumps({"message": "Obituary created successfully"})
    }
    
    return response


def ChatGPT_API(chatgpt_api_key, name, born_year, died_year):
    
    question = f"write an obituary about a fictional character named {name} who was born on {born_year} and died on {died_year}."
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {chatgpt_api_key}"
    }
    payload = {
        "model": "text-curie-001",
        "prompt": question,
        "max_tokens": 100,
        "temperature": 0.7
     }

    response = requests.post("https://api.openai.com/v1/completions", headers=headers, json=payload)
    if response.ok:
        answer = response.json()['choices'][0]['text'].strip()
        return {
            "statusCode": 200,
            "body": answer
        }
    else:
        return {
            "statusCode": response.status_code,
            "body": response.text
        }

def upload_to_cloudinary(filename, api_key, api_secret, resource_type="image"):

    body = {
        "api_key": api_key,
    }

    timestamp = int(time.time())
    body["timestamp"] = timestamp

    body["signature"] = create_signature(body, api_secret)
    body["file"] = filename

    # Upload the image using the requests library
    url = f'https://api.cloudinary.com/v1_1/dqzzcabzk/{resource_type}/upload'
    response = requests.post(url, data=body)

    print(response.json())


def create_signature(body, api_secret):
    exclude = ["api_key", "resource_type", "cloud_name"]
    sorted_body = sort_dictionary(body, exclude)
    query_string = create_query_string(sorted_body)
    query_string_appended = f"{query_string}{api_secret}"
    hashed = hashlib.sha1(query_string_appended.encode())
    signature = hashed.hexdigest()
    return signature

def sort_dictionary(dictionary, exclude):
    return {k: v for k,v in sorted(dictionary.items(), key=lambda item: item[0]) if k not in exclude}

def create_query_string(body):
    query_string = ""
    for idx, (k,v) in enumerate(body.items()):
        query_string = f"{k}={v}" if idx == 0 else f"{query_string}&{k}={v}"

    return query_string


def AWSPolly(text):
    # Set up the Amazon Polly client
    polly_client = boto3.Session(region_name='ca-central-1').client('polly')

    # Synthesize speech using Amazon Polly
    response = polly_client.synthesize_speech(
        Text=text,
        OutputFormat='mp3',
        VoiceId='Joanna'
    )
    
    # Encode the audio content as base64
    audio_stream = response['AudioStream'].read()
    
    # audio_base64 = base64.b64encode(audio_stream).decode('utf-8')
    
    
    data_uri = f"data:audio/mp3;base64,{base64.b64encode(audio_stream).decode('utf-8')}"

    return data_uri

# filename = ""

# data_uri = f"data:image/png;base64,{filename}"

audio = AWSPolly("Hello World")

print(audio)

# upload_to_cloudinary(filename, "945755886124536", "xYu39_TLhFYorTUfv1KQJBNToe8")
